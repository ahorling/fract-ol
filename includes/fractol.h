/* ************************************************************************** */
/*                                                                            */
/*                                                        ::::::::            */
/*   fractol.h                                          :+:    :+:            */
/*                                                     +:+                    */
/*   By: ahorling <ahorling@student.codam.nl>         +#+                     */
/*                                                   +#+                      */
/*   Created: 2022/09/19 14:52:07 by ahorling      #+#    #+#                 */
/*   Updated: 2022/10/17 02:37:02 by ahorling      ########   odam.nl         */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL_H
# define FRACTOL_H

# include "libraries/MLX42/include/MLX42/MLX42.h"
# include "libraries/libft/includes/libft.h"
# include <math.h>
# include <stdlib.h>
# include <unistd.h>
# include <stdio.h>

enum	e_type{mandel, jul, burningship};

// struct for storing complex numbers.
// x = the real number
// y = the imaginary number

typedef struct s_comp
{
	long double	x;
	long double	y;
}	t_comp;

//	struct for storing cartesian plane info.

typedef struct s_plane
{
	long double	xmin;
	long double	xmax;
	long double	ymin;
	long double	ymax;
}	t_plane;

// struct for storing rgb colour values

typedef struct s_rgb
{
	int	r;
	int	g;
	int	b;
	int	a;
}	t_rgb;

// e_type = which fractal
// width = window x value
// height = window y value
// plane = the values of the max/min cartesian plane coordinates
// iteration = iteration
// maxiters = maximum number of iterations
// mlx = the mlx structgenerated by mlx42
// zoom = the zoom value
// zoomcount = number of zoom steps done
// mousepos = position of mouse cursor
// juliaconst = the C value for the julia sets

typedef struct s_info
{
	enum e_type	type;
	int			width;
	int			height;
	t_plane		plane;
	int			iteration;
	int			maxiters;
	mlx_t		*mlx;
	long double	zoom;
	int			zoomcount;
	mlx_image_t	*image;
	t_comp		mousepos;
	t_comp		juliaconst;
}	t_info;

// My fractal functions
void		mandelbrot(t_info *info, t_comp relpoint, t_comp z);
void		julia(t_info *info, t_comp z);
void		ship(t_info *info, t_comp relpoint, t_comp z);

//My hook functions
void		hooks(void *param);
void		scroll_zoom(double xdelta, double ydelta, void *param);
void		shift_view(t_info *info);
void		reset_view(t_info *info);

//Main functions shared across all fractals
int			parser(int arguments, char *argv[]);
void		setup(t_info *info, char *fractal, char *x, char *y);
void		start(t_info *info);
void		draw_fractal(t_info *info, t_comp relpoint, t_comp pixel);
t_comp		relative_point(t_info info, t_comp pixel);

//Colouring functions
int			encode_rgba_mand(t_info info);
int			encode_rgba_julia(t_info info);
int			encode_rgba_ship(t_info info);
void		colour_pixel(t_info *info, t_comp pixel);

//Zooming functions
long double	zoom(long double start, long double end, long double zoom);
void		apply_zoom(t_info *info);
void		zoom_out(t_info *info);
void		zoom_in(t_info *info);

#endif