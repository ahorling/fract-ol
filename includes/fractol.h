/* ************************************************************************** */
/*                                                                            */
/*                                                        ::::::::            */
/*   fractol.h                                          :+:    :+:            */
/*                                                     +:+                    */
/*   By: ahorling <ahorling@student.codam.nl>         +#+                     */
/*                                                   +#+                      */
/*   Created: 2022/09/19 14:52:07 by ahorling      #+#    #+#                 */
/*   Updated: 2022/10/12 19:42:58 by ahorling      ########   odam.nl         */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRACTOL
# define FRACTOL
#define BPP sizeof(int32_t)

#include "libraries/MLX42/include/MLX42/MLX42.h"
#include "libraries/libft/includes/libft.h"
#include <math.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

enum	e_type{MANDELBROT, JULIA, SOMETHING};

/*
	struct for storing complex numbers.
	x = the real number
	y = the imaginary number
*/

typedef struct	s_comp
{
	double	x;
	double	y;
}	t_comp;

/*
	struct for storing cartesian plane info.
*/

typedef	struct	s_plane
{
	double	xmin;
	double	xmax;
	double	ymin;
	double	ymax;
}	t_plane;

/*
	struct for storing rgb colour values
*/

typedef	struct	s_rgb
{
	int	r;
	int	g;
	int	b;
	int	a;
}	t_rgb;

/*
width = window x value
height = window y value
e_type = which fractal
iteration = iteration
maxiters = maximum number of iterations
mlx = the mlx structgenerated by mlx42
zoom = the zoom value
plane = the values of the max/min cartesian plane coordinates
*/

typedef struct	s_info
{
	int			width;
	int			height;
	enum e_type	type;
	int			iteration;
	int			maxiters;
	mlx_t		*mlx;
	double 		zoom;
	mlx_image_t	*image;
	t_plane		plane;
	t_comp		mousepos;
}	t_info;

void	mandelbrot(t_info *info, t_comp relpoint, t_comp z);
void	move(void *param);
void	scroll_zoom(double xdelta, double ydelta, void* param);
void	draw_fractal(t_info *info, t_comp relpoint, t_comp pixel);
t_comp	relative_point(t_info info, t_comp pixel);
void	start(t_info *info);
void	colour_pixel(t_info *info, t_comp pixel);
int		encode_rgba(t_info info);
void	apply_zoom(t_info *info);
void	setup(t_info *info, char *fractal, char *x, char *y);
void	julia(t_info *info, t_comp z);


#endif